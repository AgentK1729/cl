/*Name: Gauri Somavanshi
Roll no: B4259
Class: B.E Comp (B)
*/

/*Problem Statement:
			Implement a lexical analyzer for a subset of C using LEX. Implementation should
			support Error handling.

*/


%{
#include<stdio.h>
%}
%%
int |
char |
float |
if |
else |
switch |
case |
for |
while |
do+ printf("\n %s IS A KEYWORD.",yytext);
[ ] printf("\n");
[{] printf("\n %s IS STARTING OF BLOCK.",yytext);
[}] printf("\n %s IS ENDING OF BLOCK.",yytext);
[(] printf("\n %s IS OPENING PARANTHESIS.",yytext);
[)] printf("\n %s IS CLOSING PARANTHESIS.",yytext);
[a-zA-Z]+[[]+[0-9]+[]] printf("\n %s IS AN ARRAY.",yytext);
[;] printf("\n %s IS AN END OF STATEMENT.",yytext);
printf |
scanf |
strcpy |
atoi |
strstr |
main |
malloc+ printf("\n %s IS AN INBUILD FUNCTION.",yytext);
[a-z]+[.h] printf("\n %s IS A HEADER FILE.",yytext);
[=] printf("\n %s IS AN ASSIGNMENT OPERATOR.",yytext);
[0-9]+ printf("\n %s IS A NUMBER.",yytext);
[/]+[*]+ printf("\n %s IS STARTOF COMMENT.",yytext);
[*]+[/] printf("\n %s IS END OF COMMENT.",yytext);
[/][/][^\n]+ printf("\n %s IS SINGLE LINE COMMENT.",yytext);
[a-zA-Z]+[a-zA-Z0-9]* printf("\n %s IS VALID VARIABLE NAME.",yytext);
[0-9]+[a-zA-Z0-9]+ printf("\n %s IS INVALID VARIABLE NAME.",yytext);
[#][^\n]+ printf(" \n PREPROCESSOR DIRECTIVE.");
[.] printf("\n PREPROCESSOR DIRECTIVE.");
[+] |
[-] |
[*] |
[/]+ printf("\n %s IS AN ARITHMATIC OPERATOR.",yytext);
[>] |
[<] |
[>=]+ printf("\n %s IS A RELATIONAL OPERATOR.",yytext);
%%
main()
{
FILE *fp;
fp=fopen("assignment2.txt","r");
yyin=fp;
yylex();
}


INPUT: assignment2.txt

#include<stdio.h>
#define area 10
main()
{
int a[10],ab;
float 3g;
ab=100;

/* part 1
done */

if(ab>100)
 printf("\n ab greater");

// part 2
}


OUTPUT:

ccompl04-27@ccompl0427:~$ cd Desktop
ccompl04-27@ccompl0427:~/Desktop$ lex cl2.l
ccompl04-27@ccompl0427:~/Desktop$ cc lex.yy.c -ll
ccompl04-27@ccompl0427:~/Desktop$ ./a.out
 
 PREPROCESSOR DIRECTIVE.
 
 PREPROCESSOR DIRECTIVE.

 main IS AN INBUILD FUNCTION.
 ( IS OPENING PARANTHESIS.
 ) IS CLOSING PARANTHESIS.

 { IS STARTING OF BLOCK.

 int IS A KEYWORD.

 a[10] IS AN ARRAY.,
 ab IS VALID VARIABLE NAME.
 ; IS AN END OF STATEMENT.

 float IS A KEYWORD.

 3g IS INVALID VARIABLE NAME.
 ; IS AN END OF STATEMENT.

 ab IS VALID VARIABLE NAME.
 = IS AN ASSIGNMENT OPERATOR.
 100 IS A NUMBER.
 ; IS AN END OF STATEMENT.


 /* IS STARTOF COMMENT.

 part IS VALID VARIABLE NAME.

 1 IS A NUMBER.

 done IS VALID VARIABLE NAME.

 */ IS END OF COMMENT.


 if IS A KEYWORD.
 ( IS OPENING PARANTHESIS.
 ab IS VALID VARIABLE NAME.
 > IS A RELATIONAL OPERATOR.
 100 IS A NUMBER.
 ) IS CLOSING PARANTHESIS.


 printf IS AN INBUILD FUNCTION.
 ( IS OPENING PARANTHESIS."\
 n IS VALID VARIABLE NAME.

 ab IS VALID VARIABLE NAME.

 greater IS VALID VARIABLE NAME."
 ) IS CLOSING PARANTHESIS.
 ; IS AN END OF STATEMENT.


 // part 2 IS SINGLE LINE COMMENT.

 } IS ENDING OF BLOCK.

